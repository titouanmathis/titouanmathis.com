/*------------------------------------*\
		Functions
\*------------------------------------*/


/**
 * A function helper to avoid having to type `map-get($z-layers, ...)`
 * Based on http://css-tricks.com/handling-z-index/
 * @param  {string} $layer The name of the z-index
 * @param  {number} $var   The modifier if needed
 * @return {number}        The corresponding z-index based on the $z-layers var
 */
@function z($layer, $var:0) {
	@if not map-has-key($z-layers, $layer) {
    @error "No z-index found in $z-layers map for `#{$layer}`. Property omitted.";
  }

	$value: map-get($z-layers, $layer);

	@return $value + $var;
}

/**
 * Remove units from the given number
 * @param  {number} $number The number with units
 * @return {number}
 */
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}



/**
 * Create variables for the media queries
 * @param  {string} $breakpoint The breakpoint
 * @param  {string} $type       Type of media query (min or max)
 * @param  {string} $unit       The unit for the media queries (em or px)
 * @return {string}             A media query expression
 */
@function md($breakpoint, $type:"min", $unit:"em") {

	@if not map-has-key($breakpoints, $breakpoint) {
    @error "No breakpoint found in $breakpoints map for `#{$breakpoint}`. Property omitted.";
  }

	$value: map-get($breakpoints, $breakpoint);

	@if $value / $value != 1 {
		@return $value;
  }

	@if $unit == "em" {

		$size: $value / 16 * 1em;

		@if $type == "min" {
			@return "(min-width: #{$size})";
		}
		@if $type == "max" {
			@return "(max-width: #{$size})";
		}
	}

	@if $unit == "px" {

		$size: $value * 1px;

		@if $type == "min" {
			@return "(min-width: #{$size})";
		}
		@if $type == "max" {
			@return "(max-width: #{$size})";
		}
	}
}


/**
 * Slightly lighten a color
 * @access public
 * @param {Color} $color - color to tint
 * @param {Number} $percentage - percentage of `$color` in returned color
 * @return {Color}
 */
@function tint($color, $percentage) {
	@return mix($color, #fff, $percentage);
}

/**
 * Slightly darken a color
 * @access public
 * @param  {color}  $color       color to shade
 * @param  {number} $percentage  percentage of `$color` in returned color
 * @return {Color}
 */
@function shade($color, $percentage) {
	@return mix($color, #000, $percentage);
}



/**
 * Power function
 * @param  {number} $number Number to apply power
 * @param  {number} $exp    The exponant for the power
 * @return {number}         The powered number
 */
@function pow($number, $exp) {
	$value: 1;
	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	} @else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: $value / $number;
		}
	}
	@return $value;
}

/**
 * Factorial function
 * @param  {number} $number The number to factorize
 * @return {number}         The factorised number
 */
@function fact($number) {
	$value: 1;
	@if $number > 0 {
		@for $i from 1 through $number {
			$value: $value * $i;
		}
	}
	@return $value;
}

/**
 * Pi reference
 * @return {number} Retrun PI with 11 decimals
 */
@function pi() {
	@return 3.14159265359;
}

/**
 * Convert deg to rad
 * @param  {string} $angle The angle to convert
 * @return {number}        The unitless angle converted to rad
 */
@function rad($angle) {
	$unit: unit($angle);
	$unitless: $angle / ($angle * 0 + 1);
	// If the angle has 'deg' as unit, convert to radians.
	@if $unit == deg {
		$unitless: $unitless / 180 * pi();
	}
	@return $unitless;
}

/**
 * Calculate the sinus of an angle
 * @param  {string} $angle The angle to compute
 * @return {number}        The sinus of the given angle
 */
@function sin($angle) {
	$sin: 0;
	$angle: rad($angle);
	// Iterate a bunch of times.
	@for $i from 0 through 10 {
		$sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
	}
	@return $sin;
}

/**
 * Calculate the cosinus of an angle
 * @param  {string} $angle The angle to compute
 * @return {number}        The cosinus of the given angle
 */
@function cos($angle) {
	$cos: 0;
	$angle: rad($angle);
	// Iterate a bunch of times.
	@for $i from 0 through 10 {
		$cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
	}
	@return $cos;
}

/**
 * Calculate the tangent of an angle
 * @param  {string} $angle The angle to compute
 * @return {number}        The tangent of the given angle
 */
@function tan($angle) {
	@return sin($angle) / cos($angle);
}